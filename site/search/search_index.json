{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Portable K8s GitOps Playbook","text":"<p>Welcome to the Portable K8s GitOps Playbook - a comprehensive guide for building a lean, self-managed Kubernetes platform using modern cloud-native tools and GitOps principles.</p>"},{"location":"#project-overview","title":"Project Overview","text":"<p>This playbook provides a complete blueprint for establishing a production-ready Kubernetes environment with:</p> <ul> <li>Local Development Environment that mirrors production</li> <li>GitOps-based deployment using ArgoCD</li> <li>CI/CD pipelines with GitHub Actions</li> <li>Full observability stack (metrics, logs, traces)</li> <li>Security baseline with Pod Security Standards</li> <li>Automated backups and disaster recovery</li> </ul>"},{"location":"#current-status","title":"Current Status","text":""},{"location":"#phase-1-local-development-environment-setup-complete","title":"\u2705 Phase 1: Local Development Environment Setup - COMPLETE","text":"<p>We've successfully set up a local Kubernetes development environment on macOS with:</p> <ul> <li>Kubernetes Cluster: K3s running via Colima (6 CPU, 12GB RAM, 60GB disk)</li> <li>Container Runtime: Docker via Colima</li> <li>GitOps: ArgoCD installed and accessible</li> <li>CLI Tools: kubectl, Helm, Tilt, Azure CLI</li> </ul> <p>View Phase 1 Documentation</p>"},{"location":"#phase-2-gitops-repository-and-argocd-configuration-complete","title":"\u2705 Phase 2: GitOps Repository and ArgoCD Configuration - COMPLETE","text":"<p>We've established a complete GitOps workflow with:</p> <ul> <li>GitOps Repository: Structured repository at <code>github.com/sojohnnysaid/k8s</code></li> <li>Monitoring Stack: Prometheus &amp; Grafana deployed via ArgoCD</li> <li>Secrets Management: SOPS encryption with Age keys configured</li> <li>Auto-sync: ArgoCD automatically deploying from Git</li> <li>Repository Access: SSH and HTTPS configured with TLS bypass for corporate networks</li> </ul> <p>View Phase 2 Documentation</p>"},{"location":"#quick-start","title":"\ud83d\ude80 Quick Start","text":"<p>If you're just getting started, begin with:</p> <ol> <li>Phase 1 - Local Development Environment Setup - Get your local K8s cluster running</li> <li>Phase 2 - GitOps Repository and ArgoCD Configuration - Set up GitOps workflow</li> <li>Goals &amp; Non-Goals - Understand what this project aims to achieve</li> <li>Principles - Learn the guiding principles behind our decisions</li> </ol>"},{"location":"#architecture","title":"Architecture","text":"<p>This playbook implements a modern cloud-native architecture featuring:</p> <ul> <li>Platform: Kubernetes (K3s locally, AKS in Azure)</li> <li>GitOps: ArgoCD for continuous deployment</li> <li>CI/CD: GitHub Actions for builds and testing</li> <li>Observability: Prometheus, Grafana, EFK stack</li> <li>Security: SOPS for secrets, Pod Security Standards</li> <li>Backups: Velero for cluster state backup</li> </ul>"},{"location":"#documentation-structure","title":"Documentation Structure","text":"<ul> <li>Reference Architecture - System design and components</li> <li>Local Dev Setup - Development workflow and best practices</li> <li>Phase 1 - Environment Setup</li> <li>Phase 2 - GitOps Configuration</li> <li>CI/CD &amp; GitOps - Pipeline and deployment strategies</li> <li>Operations Runbooks - Day-to-day operational procedures</li> <li>Security Baseline - Security configurations and best practices</li> </ul>"},{"location":"#next-steps","title":"Next Steps","text":"<p>With Phases 1 &amp; 2 complete, the upcoming phases include:</p> <ul> <li>Phase 3: CI/CD Pipeline with GitHub Actions</li> <li>Phase 4: Azure AKS Provisioning and Production Setup</li> <li>Phase 5: Full Observability Stack (EFK Logging)</li> <li>Phase 6: Advanced Secrets Management</li> <li>Phase 7: Velero Backup Configuration</li> <li>Phase 8: Security Policy Enforcement</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<p>This is a living document that evolves with best practices and new tools. Contributions and feedback are welcome!</p> <p>Last Updated: Phase 2 Completion - GitOps and Monitoring Stack Deployed</p>"},{"location":"local-dev/","title":"Local Development Workflow","text":"<p>This page will document the day-to-day development workflow patterns once the local environment is set up.</p>"},{"location":"local-dev/#coming-soon","title":"Coming Soon","text":"<ul> <li>Development patterns with Tilt</li> <li>GitOps workflow with ArgoCD</li> <li>Testing strategies</li> <li>Debugging techniques</li> <li>Hot reload and live development</li> </ul> <p>For initial environment setup, see Phase 1 - Local Development Environment Setup.</p>"},{"location":"local-setup/phase1-environment-setup/","title":"Local Development Environment Setup","text":"<p>This guide documents the setup of a local Kubernetes development environment on macOS using Colima, K3s, and essential cloud-native tools.</p>"},{"location":"local-setup/phase1-environment-setup/#phase-1-local-kubernetes-with-gitops","title":"Phase 1: Local Kubernetes with GitOps","text":""},{"location":"local-setup/phase1-environment-setup/#prerequisites","title":"Prerequisites","text":""},{"location":"local-setup/phase1-environment-setup/#step-1-homebrew-package-manager","title":"Step 1: Homebrew Package Manager \u0005","text":"<p>Homebrew is required for installing all the tools in this guide.</p> <p>Check Installation: <pre><code>brew --version\n</code></pre></p> <p>Expected Output: <pre><code>Homebrew 4.x.x\n</code></pre></p> <p>Status: \u0005 Installed (Version 4.6.3)</p> <p>If Homebrew is not installed, run: <pre><code>/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n</code></pre></p>"},{"location":"local-setup/phase1-environment-setup/#step-2-install-colima","title":"Step 2: Install Colima","text":"<p>Colima provides a lightweight container runtime with Kubernetes support via K3s.</p> <p>Installation: <pre><code>brew install colima\n</code></pre></p> <p>Verify Installation: <pre><code>colima version\n</code></pre></p> <p>Expected Output: <pre><code>colima version 0.x.x\ngit commit: &lt;commit-hash&gt;\n</code></pre></p> <p>Status: \u2705 Installed (Version 0.8.4)</p>"},{"location":"local-setup/phase1-environment-setup/#step-3-install-docker-cli","title":"Step 3: Install Docker CLI","text":"<p>Docker CLI is required for Colima to provide container runtime functionality.</p> <p>Installation: <pre><code>brew install docker\n</code></pre></p> <p>Verify Installation: <pre><code>docker --version\n</code></pre></p> <p>Expected Output: <pre><code>Docker version xx.x.x, build xxxxxxx\n</code></pre></p> <p>Status: \u2705 Installed (Version 28.3.3)</p> <p>Note: This installs only the Docker CLI, not Docker Desktop. Colima will provide the Docker daemon.</p>"},{"location":"local-setup/phase1-environment-setup/#step-4-install-kubectl","title":"Step 4: Install kubectl","text":"<p>kubectl is the command-line tool for interacting with Kubernetes clusters.</p> <p>Installation: <pre><code>brew install kubectl\n</code></pre></p> <p>Verify Installation: <pre><code>kubectl version --client\n</code></pre></p> <p>Expected Output: <pre><code>Client Version: v1.xx.x\nKustomize Version: vx.x.x\n</code></pre></p> <p>Status: \u2705 Installed (Version 1.33.3)</p>"},{"location":"local-setup/phase1-environment-setup/#step-5-install-helm","title":"Step 5: Install Helm","text":"<p>Helm is the package manager for Kubernetes, used for deploying and managing applications.</p> <p>Installation: <pre><code>brew install helm\n</code></pre></p> <p>Verify Installation: <pre><code>helm version\n</code></pre></p> <p>Expected Output: <pre><code>version.BuildInfo{Version:\"v3.x.x\", GitCommit:\"...\", GitTreeState:\"clean\", GoVersion:\"...\"}\n</code></pre></p> <p>Status: \u2705 Installed (Version 3.18.4)</p>"},{"location":"local-setup/phase1-environment-setup/#step-6-install-tilt","title":"Step 6: Install Tilt","text":"<p>Tilt enables fast local Kubernetes development with automatic rebuilds and live updates.</p> <p>Installation: <pre><code>brew install tilt\n</code></pre></p> <p>Verify Installation: <pre><code>tilt version\n</code></pre></p> <p>Expected Output: <pre><code>v0.x.x, built yyyy-mm-dd\n</code></pre></p> <p>Status: \u2705 Installed (Version 0.35.0)</p>"},{"location":"local-setup/phase1-environment-setup/#step-7-install-argocd-cli","title":"Step 7: Install ArgoCD CLI","text":"<p>ArgoCD CLI for managing GitOps deployments from the command line.</p> <p>Installation: <pre><code>brew install argocd\n</code></pre></p> <p>Verify Installation: <pre><code>argocd version --client\n</code></pre></p> <p>Expected Output: <pre><code>argocd: vx.x.x+xxxxxxx\n  BuildDate: yyyy-mm-dd\n  GitCommit: xxxxxxx\n  Platform: darwin/arm64\n</code></pre></p> <p>Status: \u2705 Installed (Version 3.0.12)</p>"},{"location":"local-setup/phase1-environment-setup/#step-8-install-azure-cli","title":"Step 8: Install Azure CLI","text":"<p>Azure CLI for managing Azure resources and AKS clusters (needed for later phases).</p> <p>Installation: <pre><code>brew install azure-cli\n</code></pre></p> <p>Verify Installation: <pre><code>az version\n</code></pre></p> <p>Expected Output: <pre><code>azure-cli                         2.xx.x\ncore                              2.xx.x\ntelemetry                          x.x.x\n...\n</code></pre></p> <p>Status: \u2705 Installed (Version 2.76.0)</p>"},{"location":"local-setup/phase1-environment-setup/#starting-the-local-kubernetes-cluster","title":"Starting the Local Kubernetes Cluster","text":""},{"location":"local-setup/phase1-environment-setup/#step-9-start-colima-with-kubernetes","title":"Step 9: Start Colima with Kubernetes","text":"<p>Start Colima with K3s Kubernetes and Docker runtime.</p> <p>Start Colima: <pre><code>colima start --kubernetes --cpu 6 --memory 12 --disk 60\n</code></pre></p> <p>This will: - Create a Colima VM with 6 CPUs, 12GB RAM, and 60GB disk - Install Docker daemon inside the VM - Install K3s Kubernetes - Configure kubectl context</p> <p>Note: First run takes several minutes to download images and set up the environment.</p> <p>Verify Kubernetes: <pre><code>kubectl get nodes\n</code></pre></p> <p>Expected Output: <pre><code>NAME     STATUS   ROLES                  AGE   VERSION\ncolima   Ready    control-plane,master   Xm    vX.XX.X+k3s1\n</code></pre></p> <p>Status: \u2705 Running (K3s v1.33.3+k3s1)</p> <p>Docker Context: Automatically switched to <code>colima</code></p>"},{"location":"local-setup/phase1-environment-setup/#installing-argocd","title":"Installing ArgoCD","text":""},{"location":"local-setup/phase1-environment-setup/#step-10-install-argocd-on-the-cluster","title":"Step 10: Install ArgoCD on the Cluster","text":"<p>Deploy ArgoCD for GitOps-based application management.</p> <p>Create Namespace: <pre><code>kubectl create namespace argocd\n</code></pre></p> <p>Install ArgoCD: <pre><code>kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml\n</code></pre></p> <p>Verify Installation: <pre><code>kubectl get pods -n argocd\n</code></pre></p> <p>Expected Output: All pods should show <code>1/1</code> READY and <code>Running</code> status: <pre><code>NAME                                                READY   STATUS    RESTARTS   AGE\nargocd-application-controller-0                     1/1     Running   0          Xm\nargocd-applicationset-controller-XXXXXXXXXX-XXXXX   1/1     Running   0          Xm\nargocd-dex-server-XXXXXXXXXX-XXXXX                  1/1     Running   0          Xm\nargocd-notifications-controller-XXXXXXXXXX-XXXXX    1/1     Running   0          Xm\nargocd-redis-XXXXXXXXXX-XXXXX                       1/1     Running   0          Xm\nargocd-repo-server-XXXXXXXXXX-XXXXX                 1/1     Running   0          Xm\nargocd-server-XXXXXXXXXX-XXXXX                       1/1     Running   0          Xm\n</code></pre></p> <p>Status: \u2705 Installed and Running</p>"},{"location":"local-setup/phase1-environment-setup/#step-11-access-argocd-ui","title":"Step 11: Access ArgoCD UI","text":"<p>Set up port forwarding and access the ArgoCD web interface.</p> <p>Retrieve Admin Password: <pre><code>kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath=\"{.data.password}\" | base64 -d\n</code></pre></p> <p>Start Port Forwarding: <pre><code>kubectl port-forward svc/argocd-server -n argocd 8080:443\n</code></pre></p> <p>Access ArgoCD: 1. Open browser and navigate to: https://localhost:8080 2. Accept the certificate warning (expected for local setup) 3. Login with:    - Username: <code>admin</code>    - Password: (from the command above)</p> <p>ArgoCD UI Successfully Running:</p> <p></p> <p>Status: \u2705 Accessible at https://localhost:8080</p>"},{"location":"local-setup/phase1-environment-setup/#phase-1-complete","title":"Phase 1 Complete!","text":""},{"location":"local-setup/phase1-environment-setup/#summary-of-installed-components","title":"Summary of Installed Components","text":"Tool Version Status Purpose Homebrew 4.6.3 \u2705 Package manager for macOS Colima 0.8.4 \u2705 Container runtime &amp; K8s Docker CLI 28.3.3 \u2705 Container management kubectl 1.33.3 \u2705 Kubernetes CLI Helm 3.18.4 \u2705 Kubernetes package manager Tilt 0.35.0 \u2705 Local K8s development ArgoCD CLI 3.0.12 \u2705 GitOps CLI Azure CLI 2.76.0 \u2705 Azure resource management"},{"location":"local-setup/phase1-environment-setup/#running-services","title":"Running Services","text":"<ul> <li>Kubernetes Cluster: K3s v1.33.3 via Colima (6 CPU, 12GB RAM, 60GB disk)</li> <li>ArgoCD: v2.x running in cluster, accessible via port-forward</li> <li>Docker: Available via Colima context</li> </ul>"},{"location":"local-setup/phase1-environment-setup/#next-steps","title":"Next Steps","text":"<p>With Phase 1 complete, you now have: - \u2705 A local Kubernetes cluster running on your Mac - \u2705 ArgoCD installed and accessible for GitOps deployments - \u2705 All necessary CLI tools for development</p> <p>You can now proceed to: - Phase 2: Setting up GitOps repository structure - Phase 3: Deploying sample applications - Phase 4: Configuring observability stack</p>"},{"location":"local-setup/phase1-environment-setup/#useful-commands","title":"Useful Commands","text":"<p>Check cluster status: <pre><code>kubectl get nodes\nkubectl get pods --all-namespaces\n</code></pre></p> <p>Stop/Start Colima: <pre><code>colima stop\ncolima start\n</code></pre></p> <p>Access ArgoCD (when port-forward is stopped): <pre><code>kubectl port-forward svc/argocd-server -n argocd 8080:443\n</code></pre></p>"},{"location":"local-setup/phase2-gitops-setup/","title":"Phase 2: GitOps Repository and ArgoCD Configuration","text":"<p>This guide documents the setup of a GitOps repository structure and ArgoCD configuration for managing both local development and production environments.</p>"},{"location":"local-setup/phase2-gitops-setup/#prerequisites","title":"Prerequisites","text":"<ul> <li>\u2705 Phase 1 Complete (Local K8s cluster with ArgoCD installed)</li> <li>\u2705 GitHub account with repository creation permissions</li> <li>\u2705 Git configured locally with SSH access to GitHub</li> </ul>"},{"location":"local-setup/phase2-gitops-setup/#gitops-repository-setup","title":"GitOps Repository Setup","text":""},{"location":"local-setup/phase2-gitops-setup/#step-1-create-gitops-repository","title":"Step 1: Create GitOps Repository","text":"<p>Create a dedicated repository for Kubernetes manifests and configurations.</p> <p>Repository Created: <pre><code>Repository: github.com/sojohnnysaid/k8s\nType: Private\n</code></pre></p> <p>Clone and Initialize: <pre><code>git clone git@github.com:sojohnnysaid/k8s.git\ncd k8s\n</code></pre></p> <p>Status: \u2705 Complete</p>"},{"location":"local-setup/phase2-gitops-setup/#step-2-create-directory-structure","title":"Step 2: Create Directory Structure","text":"<p>Organize the repository for multi-environment support.</p> <p>Create Directories: <pre><code># Create environment directories\nmkdir -p environments/dev\nmkdir -p environments/prod\n\n# Create base configurations\nmkdir -p base/app\nmkdir -p base/infrastructure  \n\n# Create Helm values directory\nmkdir -p helm-values\n</code></pre></p> <p>Actual Structure: <pre><code>.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 base\n\u2502   \u251c\u2500\u2500 app\n\u2502   \u2514\u2500\u2500 infrastructure\n\u251c\u2500\u2500 environments\n\u2502   \u251c\u2500\u2500 dev\n\u2502   \u2514\u2500\u2500 prod\n\u251c\u2500\u2500 helm-values\n\u251c\u2500\u2500 local-notes.md\n\u2514\u2500\u2500 prompt.md\n\n8 directories, 3 files\n</code></pre></p> <p>Status: \u2705 Complete</p>"},{"location":"local-setup/phase2-gitops-setup/#step-3-document-directory-structure","title":"Step 3: Document Directory Structure","text":"<p>Add README files to document the purpose of each directory.</p> <p>base/README.md: <pre><code># Base Configurations\n\nThis directory contains base Kubernetes manifests and Helm charts that are shared across environments.\n\n- **app/**: Application manifests\n- **infrastructure/**: Infrastructure components (monitoring, logging, ingress, etc.)\n</code></pre></p> <p>environments/README.md: <pre><code># Environment-Specific Configurations\n\nEnvironment-specific overlays and configurations.\n\n- **dev/**: Local development environment (K3s on Colima)\n- **prod/**: Production environment (Azure AKS)\n</code></pre></p> <p>helm-values/README.md: <pre><code># Helm Values\n\nEnvironment-specific Helm values files for charts.\n</code></pre></p> <p>Status: \u2705 Complete</p>"},{"location":"local-setup/phase2-gitops-setup/#infrastructure-components-setup","title":"Infrastructure Components Setup","text":""},{"location":"local-setup/phase2-gitops-setup/#step-4-add-prometheus-grafana-stack","title":"Step 4: Add Prometheus &amp; Grafana Stack","text":"<p>Configure the kube-prometheus-stack for monitoring.</p> <p>Helm Repository Added: <pre><code>prometheus-community    https://prometheus-community.github.io/helm-charts\n</code></pre></p> <p>File Created: <code>base/infrastructure/monitoring/kustomization.yaml</code> <pre><code>apiVersion: kustomize.config.k8s.io/v1beta1\nkind: Kustomization\nnamespace: monitoring\n\nhelmCharts:\n  - name: kube-prometheus-stack\n    repo: https://prometheus-community.github.io/helm-charts\n    version: 65.1.1\n    releaseName: monitoring\n    namespace: monitoring\n    valuesFile: values.yaml\n</code></pre></p> <p>Status: \u2705 Complete</p>"},{"location":"local-setup/phase2-gitops-setup/#step-5-create-monitoring-values-file","title":"Step 5: Create Monitoring Values File","text":"<p>Configure Prometheus and Grafana settings.</p> <p>File Created: <code>base/infrastructure/monitoring/values.yaml</code> <pre><code># Grafana configuration\ngrafana:\n  enabled: true\n  adminPassword: admin  # Change this in production!\n  service:\n    type: ClusterIP\n  ingress:\n    enabled: false\n\n# Prometheus configuration\nprometheus:\n  prometheusSpec:\n    retention: 7d\n    storageSpec:\n      volumeClaimTemplate:\n        spec:\n          accessModes: [\"ReadWriteOnce\"]\n          resources:\n            requests:\n              storage: 10Gi\n\n# AlertManager configuration\nalertmanager:\n  alertmanagerSpec:\n    storage:\n      volumeClaimTemplate:\n        spec:\n          accessModes: [\"ReadWriteOnce\"]\n          resources:\n            requests:\n              storage: 2Gi\n\n# Disable components we don't need in dev\nkubeEtcd:\n  enabled: false\nkubeControllerManager:\n  enabled: false\nkubeScheduler:\n  enabled: false\n</code></pre></p> <p>Status: \u2705 Complete</p>"},{"location":"local-setup/phase2-gitops-setup/#step-6-add-efk-logging-stack","title":"Step 6: Add EFK Logging Stack","text":"<p>Configure Elasticsearch, Fluent Bit, and Kibana for logging.</p> <p>File Created: <code>base/infrastructure/logging/kustomization.yaml</code> <pre><code>apiVersion: kustomize.config.k8s.io/v1beta1\nkind: Kustomization\n\nnamespace: logging\n\nhelmCharts:\n- name: elasticsearch\n  repo: https://helm.elastic.co\n  version: 8.5.1\n  releaseName: elasticsearch\n  namespace: logging\n  valuesFile: elasticsearch-values.yaml\n\n- name: kibana\n  repo: https://helm.elastic.co\n  version: 8.5.1\n  releaseName: kibana\n  namespace: logging\n  valuesFile: kibana-values.yaml\n\n- name: fluent-bit\n  repo: https://fluent.github.io/helm-charts\n  version: 0.24.0\n  releaseName: fluent-bit\n  namespace: logging\n  valuesFile: fluent-bit-values.yaml\n</code></pre></p> <p>Helm Repositories Added: <pre><code>elastic                 https://helm.elastic.co\nfluent                  https://fluent.github.io/helm-charts\n</code></pre></p> <p>Status: \u2705 Complete</p>"},{"location":"local-setup/phase2-gitops-setup/#step-7-create-efk-values-files","title":"Step 7: Create EFK Values Files","text":"<p>Create values files for Elasticsearch, Kibana, and Fluent Bit.</p> <p>Files Created: - <code>base/infrastructure/logging/elasticsearch-values.yaml</code> - Single-node ES config for dev - <code>base/infrastructure/logging/kibana-values.yaml</code> - Kibana pointing to ES master - <code>base/infrastructure/logging/fluent-bit-values.yaml</code> - Log collection from all containers</p> <p>Directory Structure: <pre><code>base/infrastructure/logging/\n\u251c\u2500\u2500 elasticsearch-values.yaml\n\u251c\u2500\u2500 fluent-bit-values.yaml\n\u251c\u2500\u2500 kibana-values.yaml\n\u2514\u2500\u2500 kustomization.yaml\n</code></pre></p> <p>Status: \u2705 Complete</p>"},{"location":"local-setup/phase2-gitops-setup/#environment-specific-configurations","title":"Environment-Specific Configurations","text":""},{"location":"local-setup/phase2-gitops-setup/#step-8-set-up-kustomize-overlays-for-dev-environment","title":"Step 8: Set Up Kustomize Overlays for Dev Environment","text":"<p>Create environment-specific overlays for the dev environment.</p> <p>File Created: <code>environments/dev/kustomization.yaml</code> <pre><code>apiVersion: kustomize.config.k8s.io/v1beta1\nkind: Kustomization\n\n# Reference base configurations\nresources:\n  - ../../base/infrastructure/monitoring\n  - ../../base/infrastructure/logging\n\n# Dev-specific namespace\nnamespace: dev\n\n# Patches for dev environment\npatches:\n  - target:\n      kind: HelmChart\n      name: kube-prometheus-stack\n    patch: |-\n      - op: replace\n        path: /spec/valuesFile\n        value: ../../helm-values/dev/monitoring-values.yaml\n\n  - target:\n      kind: HelmChart\n      name: elasticsearch\n    patch: |-\n      - op: replace\n        path: /spec/valuesFile\n        value: ../../helm-values/dev/elasticsearch-values.yaml\n\n# Common labels for all resources\ncommonLabels:\n  environment: dev\n  managed-by: argocd\n</code></pre></p> <p>File Created: <code>helm-values/dev/monitoring-values.yaml</code> - Dev-specific overrides for monitoring stack - Reduced retention and storage - AlertManager disabled for dev</p> <p>Status: \u2705 Complete</p>"},{"location":"local-setup/phase2-gitops-setup/#step-9-set-up-prod-environment-overlay","title":"Step 9: Set Up Prod Environment Overlay","text":"<p>Create production environment configuration with enhanced settings.</p> <p>File Created: <code>environments/prod/kustomization.yaml</code> - References base infrastructure components - Uses production namespace - Patches to use prod-specific values</p> <p>File Created: <code>helm-values/prod/monitoring-values.yaml</code> - Longer retention periods (30d) - Larger storage allocations - Persistence enabled - AlertManager enabled</p> <p>Status: \u2705 Complete</p>"},{"location":"local-setup/phase2-gitops-setup/#secrets-management","title":"Secrets Management","text":""},{"location":"local-setup/phase2-gitops-setup/#step-10-set-up-sops-for-secrets-encryption","title":"Step 10: Set Up SOPS for Secrets Encryption","text":"<p>Configure SOPS (Secrets OPerationS) with Age encryption for secure secret management in GitOps.</p> <p>Why SOPS is Needed: GitOps requires all configurations to be stored in Git, but we cannot store secrets in plain text. SOPS allows us to: - Encrypt sensitive data before committing to Git - Decrypt automatically during deployment via ArgoCD - Maintain GitOps principles while keeping secrets secure - Track secret changes in version control without exposing values</p> <p>Tools Installed: - <code>sops</code> - Encryption/decryption tool - <code>age</code> - Modern encryption tool (simpler than GPG)</p> <p>Age Key Generated: <pre><code>age-keygen -o ~/.sops/age/keys.txt\n# Public key: age1******* (your public key will appear here)\n# Private key: Stored securely in ~/.sops/age/keys.txt\n</code></pre></p> <p>Files Created: - <code>.sops.yaml</code> - Configuration for automatic encryption rules - <code>base/infrastructure/secrets/grafana-secret.yaml</code> - Sample encrypted secret</p> <p>Encryption Process: <pre><code># Encrypts the file in place, replacing plain text with encrypted values\nsops -e -i path/to/secret.yaml\n</code></pre></p> <p>File Created: <code>.sops.yaml</code> <pre><code>creation_rules:\n  - path_regex: .*secret.*\\.yaml$\n    encrypted_regex: ^(data|stringData)$\n    age: &gt;-\n      age1******* # Your public key from age-keygen\n</code></pre></p> <p>Sample Secret Created: <code>base/infrastructure/secrets/grafana-secret.yaml</code> (before encryption) <pre><code>apiVersion: v1\nkind: Secret\nmetadata:\n  name: grafana-admin\n  namespace: monitoring\ntype: Opaque\nstringData:\n  admin-password: supersecretpassword\n  admin-user: admin\n</code></pre></p> <p>Encrypt the secret: <pre><code>mkdir -p base/infrastructure/secrets\nsops -e -i base/infrastructure/secrets/grafana-secret.yaml\n</code></pre></p> <p>Status: \u2705 Complete</p>"},{"location":"local-setup/phase2-gitops-setup/#step-11-configure-ksops-in-argocd","title":"Step 11: Configure KSOPS in ArgoCD","text":"<p>Enable ArgoCD to decrypt SOPS-encrypted secrets using KSOPS plugin.</p> <p>Create ArgoCD infrastructure directory: <pre><code>mkdir -p base/infrastructure/argocd\n</code></pre></p> <p>File Created: <code>base/infrastructure/argocd/repo-server-ksops-patch.yaml</code> <pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: argocd-repo-server\n  namespace: argocd\nspec:\n  template:\n    spec:\n      volumes:\n      - name: custom-tools\n        emptyDir: {}\n      - name: sops-age\n        secret:\n          secretName: sops-age\n      initContainers:\n      - name: install-ksops\n        image: viaductoss/ksops:v4.2.1\n        command: [\"/bin/sh\", \"-c\"]\n        args:\n        - echo \"Installing KSOPS...\";\n          mv /usr/local/bin/ksops /custom-tools/;\n          mv /usr/local/bin/kustomize /custom-tools/;\n          echo \"Done.\";\n        volumeMounts:\n        - mountPath: /custom-tools\n          name: custom-tools\n      containers:\n      - name: argocd-repo-server\n        volumeMounts:\n        - mountPath: /usr/local/bin/kustomize\n          name: custom-tools\n          subPath: kustomize\n        - mountPath: /usr/local/bin/ksops\n          name: custom-tools\n          subPath: ksops\n        - mountPath: /home/argocd/.config/sops/age\n          name: sops-age\n        env:\n        - name: SOPS_AGE_KEY_FILE\n          value: /home/argocd/.config/sops/age/keys.txt\n        - name: XDG_CONFIG_HOME\n          value: /home/argocd/.config\n</code></pre></p> <p>File Created: <code>base/infrastructure/argocd/kustomization.yaml</code> <pre><code>apiVersion: kustomize.config.k8s.io/v1beta1\nkind: Kustomization\n\nnamespace: argocd\n\npatches:\n  - path: repo-server-ksops-patch.yaml\n</code></pre></p> <p>Create Age Secret: <pre><code>kubectl create secret generic sops-age \\\n  --namespace=argocd \\\n  --from-file=keys.txt=$HOME/.sops/age/keys.txt\n</code></pre></p> <p>Apply Patch: <pre><code>kubectl patch deployment argocd-repo-server -n argocd \\\n  --patch-file base/infrastructure/argocd/repo-server-ksops-patch.yaml\n</code></pre></p> <p>Verification: <pre><code>kubectl rollout status deployment/argocd-repo-server -n argocd\nkubectl get pods -n argocd | grep repo-server\n</code></pre></p> <p>Status: \u2705 Complete</p>"},{"location":"local-setup/phase2-gitops-setup/#argocd-repository-configuration","title":"ArgoCD Repository Configuration","text":""},{"location":"local-setup/phase2-gitops-setup/#step-12-configure-repository-access","title":"Step 12: Configure Repository Access","text":"<p>Configure ArgoCD to access your GitOps repository with proper authentication.</p> <p>Configure HTTPS with TLS bypass (for corporate networks with SSL interception): <pre><code>kubectl edit configmap argocd-cm -n argocd\n</code></pre></p> <p>Add to the ConfigMap: <pre><code>data:\n  repositories: |\n    - url: https://github.com\n      insecure: true\n  repository.credentials: |\n    - url: https://github.com\n      insecureIgnoreHostKey: true\n      insecureSkipServerVerification: true\n</code></pre></p> <p>Alternative: Create repository secret with SSH: <pre><code># Create SSH secret\nkubectl create secret generic k8s-repo-ssh \\\n  --namespace=argocd \\\n  --from-file=sshPrivateKey=$HOME/.ssh/id_ed25519 \\\n  --from-literal=type=git \\\n  --from-literal=url=git@github.com:sojohnnysaid/k8s.git\n\n# Label the secret\nkubectl label secret k8s-repo-ssh -n argocd \\\n  argocd.argoproj.io/secret-type=repository\n</code></pre></p> <p>Verify repository configuration: <pre><code>kubectl get secrets -n argocd -l argocd.argoproj.io/secret-type=repository\n</code></pre></p> <p>Expected Output: <pre><code>NAME              TYPE     DATA   AGE\nk8s-repo-ssh      Opaque   3      XXm\n</code></pre></p> <p>Status: \u2705 Complete</p>"},{"location":"local-setup/phase2-gitops-setup/#deploying-monitoring-stack","title":"Deploying Monitoring Stack","text":""},{"location":"local-setup/phase2-gitops-setup/#step-13-clean-repository-structure","title":"Step 13: Clean Repository Structure","text":"<p>Organize the repository for clean application deployment.</p> <p>Create directory structure: <pre><code>cd /path/to/your/k8s-repo\n\n# Create ArgoCD applications directory\nmkdir -p argocd-apps\n\n# Archive any test applications\nmkdir -p archive/test-apps\nmv argocd-apps/test* archive/test-apps/ 2&gt;/dev/null || true\n</code></pre></p> <p>Repository structure: <pre><code>k8s/\n\u251c\u2500\u2500 argocd-apps/           # ArgoCD application definitions\n\u251c\u2500\u2500 base/                  # Base configurations\n\u2502   \u2514\u2500\u2500 infrastructure/    # Infrastructure components\n\u251c\u2500\u2500 environments/          # Environment-specific configs\n\u2502   \u251c\u2500\u2500 dev/\n\u2502   \u2514\u2500\u2500 prod/\n\u2514\u2500\u2500 helm-values/          # Helm value overrides\n</code></pre></p> <p>Status: \u2705 Complete</p>"},{"location":"local-setup/phase2-gitops-setup/#step-14-create-monitoring-application","title":"Step 14: Create Monitoring Application","text":"<p>Define the monitoring stack application for ArgoCD.</p> <p>Create application manifest: <pre><code>cat &gt; argocd-apps/monitoring-dev.yaml &lt;&lt; 'EOF'\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: monitoring-dev\n  namespace: argocd\n  finalizers:\n    - resources-finalizer.argocd.argoproj.io\nspec:\n  project: default\n  source:\n    repoURL: https://prometheus-community.github.io/helm-charts\n    chart: kube-prometheus-stack\n    targetRevision: 65.1.1\n    helm:\n      releaseName: monitoring\n      values: |\n        # Grafana configuration\n        grafana:\n          adminPassword: admin  # Change in production!\n          persistence:\n            enabled: false  # No persistence for local dev\n          service:\n            type: ClusterIP\n\n        # Prometheus configuration\n        prometheus:\n          prometheusSpec:\n            retention: 1d  # Short retention for local dev\n            storageSpec:\n              volumeClaimTemplate:\n                spec:\n                  accessModes: [\"ReadWriteOnce\"]\n                  resources:\n                    requests:\n                      storage: 5Gi\n\n        # Disable unnecessary components for local dev\n        alertmanager:\n          enabled: false\n        kubeEtcd:\n          enabled: false\n        kubeControllerManager:\n          enabled: false\n        kubeScheduler:\n          enabled: false\n  destination:\n    server: https://kubernetes.default.svc\n    namespace: monitoring\n  syncPolicy:\n    automated:\n      prune: true\n      selfHeal: true\n    syncOptions:\n      - CreateNamespace=true\n      - ServerSideApply=true  # Important for CRD size issues\nEOF\n</code></pre></p> <p>Note: The <code>ServerSideApply=true</code> option is crucial for handling Prometheus CRDs that have large annotations.</p> <p>Status: \u2705 Complete</p>"},{"location":"local-setup/phase2-gitops-setup/#step-15-deploy-monitoring-application","title":"Step 15: Deploy Monitoring Application","text":"<p>Apply the monitoring application to ArgoCD.</p> <p>Deploy the application: <pre><code>kubectl apply -f argocd-apps/monitoring-dev.yaml\n</code></pre></p> <p>Monitor deployment status: <pre><code># Check application status\nkubectl get application monitoring-dev -n argocd -w\n\n# Expected progression:\n# NAME             SYNC STATUS   HEALTH STATUS\n# monitoring-dev   OutOfSync     Missing\n# monitoring-dev   Synced        Progressing\n# monitoring-dev   Synced        Healthy\n</code></pre></p> <p>Verify pods are running: <pre><code>kubectl get pods -n monitoring\n</code></pre></p> <p>Expected Output: <pre><code>NAME                                                   READY   STATUS    RESTARTS\nmonitoring-grafana-xxx                                 3/3     Running   0\nmonitoring-kube-prometheus-operator-xxx                1/1     Running   0\nmonitoring-kube-state-metrics-xxx                      1/1     Running   0\nmonitoring-prometheus-node-exporter-xxx                1/1     Running   0\nprometheus-monitoring-kube-prometheus-prometheus-0     2/2     Running   0\n</code></pre></p> <p>Status: \u2705 Complete</p>"},{"location":"local-setup/phase2-gitops-setup/#step-16-access-grafana-dashboard","title":"Step 16: Access Grafana Dashboard","text":"<p>Set up access to the Grafana web interface.</p> <p>Port-forward Grafana: <pre><code>kubectl port-forward -n monitoring svc/monitoring-grafana 3000:80\n</code></pre></p> <p>Get admin password: <pre><code>kubectl get secret monitoring-grafana -n monitoring \\\n  -o jsonpath=\"{.data.admin-password}\" | base64 -d &amp;&amp; echo\n</code></pre></p> <p>Access Grafana: - URL: http://localhost:3000 - Username: <code>admin</code> - Password: (from command above, default is <code>admin</code>)</p> <p>Verify dashboards: 1. Navigate to Dashboards \u2192 Browse 2. You should see pre-configured Kubernetes dashboards 3. Check \"Kubernetes / API server\" for cluster metrics</p> <p>Status: \u2705 Complete</p>"},{"location":"local-setup/phase2-gitops-setup/#step-17-verify-gitops-sync","title":"Step 17: Verify GitOps Sync","text":"<p>Confirm ArgoCD is managing the deployment via GitOps.</p> <p>Check in ArgoCD UI: <pre><code># Port-forward ArgoCD\nkubectl port-forward svc/argocd-server -n argocd 8080:443\n\n# Get admin password\nkubectl -n argocd get secret argocd-initial-admin-secret \\\n  -o jsonpath=\"{.data.password}\" | base64 -d &amp;&amp; echo\n</code></pre></p> <p>Access ArgoCD: - URL: https://localhost:8080 - Username: <code>admin</code> - Password: (from command above)</p> <p>Verify application in UI: - Application should show as \"Synced\" and \"Healthy\" - All resources should be green - Auto-sync should be enabled</p> <p>Status: \u2705 Complete</p>"},{"location":"local-setup/phase2-gitops-setup/#step-18-commit-changes-to-git","title":"Step 18: Commit Changes to Git","text":"<p>Save your configuration to the GitOps repository.</p> <p>Commit and push: <pre><code># Add monitoring application\ngit add argocd-apps/monitoring-dev.yaml\n\n# Add gitignore for archive\necho \"archive/\" &gt;&gt; .gitignore\ngit add .gitignore\n\n# Commit\ngit commit -m \"feat: add monitoring stack deployment\n\n- kube-prometheus-stack v65.1.1 via Helm\n- Dev-optimized configuration\n- ServerSideApply for CRD handling\n- Auto-sync enabled\"\n\n# Push to GitHub\ngit push origin main\n</code></pre></p> <p>Verify GitOps: After pushing, ArgoCD should detect no changes needed (already in sync).</p> <p>Status: \u2705 Complete</p>"},{"location":"local-setup/phase2-gitops-setup/#phase-2-complete","title":"Phase 2 Complete!","text":""},{"location":"local-setup/phase2-gitops-setup/#summary-of-achievements","title":"Summary of Achievements","text":"<p>You have successfully:</p> Component Status Details GitOps Repository \u2705 Created and structured at <code>github.com/sojohnnysaid/k8s</code> Directory Structure \u2705 Organized with <code>argocd-apps/</code>, <code>base/</code>, <code>environments/</code>, <code>helm-values/</code> SOPS Encryption \u2705 Age encryption configured for secrets management KSOPS Integration \u2705 ArgoCD configured to decrypt SOPS secrets Repository Access \u2705 SSH and HTTPS with TLS bypass configured Monitoring Stack \u2705 kube-prometheus-stack v65.1.1 deployed Grafana \u2705 Accessible with pre-configured dashboards GitOps Sync \u2705 ArgoCD auto-syncing from Git repository"},{"location":"local-setup/phase2-gitops-setup/#running-services","title":"Running Services","text":"<p>Monitoring Stack Components: - Prometheus: Collecting and storing metrics (5GB storage, 1 day retention) - Grafana: Visualization with Kubernetes dashboards (port 3000) - Node Exporter: Host metrics collection - Kube State Metrics: Kubernetes object metrics - Prometheus Operator: Managing Prometheus configuration</p>"},{"location":"local-setup/phase2-gitops-setup/#access-information","title":"Access Information","text":"<p>ArgoCD UI: <pre><code>kubectl port-forward svc/argocd-server -n argocd 8080:443\n# URL: https://localhost:8080\n# Username: admin\n# Password: kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath=\"{.data.password}\" | base64 -d\n</code></pre></p> <p>Grafana UI: <pre><code>kubectl port-forward -n monitoring svc/monitoring-grafana 3000:80\n# URL: http://localhost:3000\n# Username: admin\n# Password: admin\n</code></pre></p>"},{"location":"local-setup/phase2-gitops-setup/#key-configurations","title":"Key Configurations","text":"<p>Repository Structure: <pre><code>k8s/\n\u251c\u2500\u2500 argocd-apps/\n\u2502   \u2514\u2500\u2500 monitoring-dev.yaml    # Monitoring application definition\n\u251c\u2500\u2500 base/                      # Base configurations (for Kustomize approach)\n\u251c\u2500\u2500 environments/              # Environment-specific overlays\n\u2502   \u251c\u2500\u2500 dev/\n\u2502   \u2514\u2500\u2500 prod/\n\u251c\u2500\u2500 helm-values/              # Helm value overrides\n\u2514\u2500\u2500 archive/                  # Archived test applications\n</code></pre></p> <p>Important Settings: - ServerSideApply: Enabled to handle large CRD annotations - Auto-sync: Enabled for automatic deployment from Git - TLS Verification: Bypassed for corporate network compatibility - Resource Limits: Optimized for local development (1 day retention, no AlertManager)</p>"},{"location":"local-setup/phase2-gitops-setup/#next-steps","title":"Next Steps","text":"<p>With Phase 2 complete, you're ready to: - Phase 3: Set up CI/CD pipeline with GitHub Actions - Phase 4: Configure Azure AKS for production - Phase 5: Deploy full observability stack (EFK logging) - Phase 6: Implement advanced secrets management - Phase 7: Configure Velero for backups - Phase 8: Apply security policies</p>"},{"location":"local-setup/phase2-gitops-setup/#troubleshooting-commands","title":"Troubleshooting Commands","text":"<p>Check application sync status: <pre><code>kubectl get applications -n argocd\nargocd app get monitoring-dev\n</code></pre></p> <p>View ArgoCD logs: <pre><code>kubectl logs -n argocd deployment/argocd-server\nkubectl logs -n argocd deployment/argocd-repo-server\n</code></pre></p> <p>Check monitoring pods: <pre><code>kubectl get pods -n monitoring\nkubectl describe pod &lt;pod-name&gt; -n monitoring\n</code></pre></p> <p>Test GitOps sync: <pre><code># Make a change in the repository\n# ArgoCD should detect and sync within 3 minutes\nargocd app sync monitoring-dev\n</code></pre></p>"}]}