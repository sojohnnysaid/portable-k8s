{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Portable K8s GitOps Playbook","text":"<p>Welcome to the Portable K8s GitOps Playbook - a comprehensive guide for building a lean, self-managed Kubernetes platform using modern cloud-native tools and GitOps principles.</p>"},{"location":"#project-overview","title":"Project Overview","text":"<p>This playbook provides a complete blueprint for establishing a production-ready Kubernetes environment with:</p> <ul> <li>Local Development Environment that mirrors production</li> <li>GitOps-based deployment using ArgoCD</li> <li>CI/CD pipelines with GitHub Actions</li> <li>Full observability stack (metrics, logs, traces)</li> <li>Security baseline with Pod Security Standards</li> <li>Automated backups and disaster recovery</li> </ul>"},{"location":"#current-status","title":"Current Status","text":""},{"location":"#phase-1-local-development-environment-setup-complete","title":"\u2705 Phase 1: Local Development Environment Setup - COMPLETE","text":"<p>We've successfully set up a local Kubernetes development environment on macOS with:</p> <ul> <li>Kubernetes Cluster: K3s running via Colima (6 CPU, 12GB RAM, 60GB disk)</li> <li>Container Runtime: Docker via Colima</li> <li>GitOps: ArgoCD installed and accessible</li> <li>CLI Tools: kubectl, Tilt, Azure CLI, ArgoCD CLI</li> </ul> <p>View Phase 1 Documentation</p>"},{"location":"#phase-2-gitops-repository-and-argocd-configuration-complete","title":"\u2705 Phase 2: GitOps Repository and ArgoCD Configuration - COMPLETE","text":"<p>We've established a complete GitOps workflow with:</p> <ul> <li>GitOps Repository: Structured repository at <code>github.com/sojohnnysaid/k8s</code></li> <li>Monitoring Stack: Prometheus &amp; Grafana deployed using raw Kubernetes manifests</li> <li>Elastic Stack: Complete ELK (Elasticsearch, Logstash, Kibana) + Filebeat for log aggregation</li> <li>Auto-sync: ArgoCD automatically deploying from Git</li> <li>Repository Access: SSH keys configured for secure access</li> <li>Manifest-based Deployment: Moved away from Helm charts to raw Kubernetes manifests for better control</li> </ul> <p>View Phase 2 Documentation</p>"},{"location":"#quick-start","title":"\ud83d\ude80 Quick Start","text":"<p>If you're just getting started, begin with:</p> <ol> <li>Phase 1 - Local Development Environment Setup - Get your local K8s cluster running</li> <li>Phase 2 - GitOps Repository and ArgoCD Configuration - Set up GitOps workflow</li> <li>Goals &amp; Non-Goals - Understand what this project aims to achieve</li> <li>Principles - Learn the guiding principles behind our decisions</li> </ol>"},{"location":"#architecture","title":"Architecture","text":"<p>This playbook implements a modern cloud-native architecture featuring:</p> <ul> <li>Platform: Kubernetes (K3s locally, AKS in Azure)</li> <li>GitOps: ArgoCD for continuous deployment</li> <li>CI/CD: GitHub Actions for builds and testing</li> <li>Observability: Prometheus, Grafana, Elastic Stack (ELK + Filebeat)</li> <li>Security: SOPS for secrets, Pod Security Standards</li> <li>Backups: Velero for cluster state backup</li> </ul>"},{"location":"#documentation-structure","title":"Documentation Structure","text":"<ul> <li>Reference Architecture - System design and components</li> <li>Local Dev Setup - Development workflow and best practices</li> <li>Phase 1 - Environment Setup</li> <li>Phase 2 - GitOps Configuration</li> <li>CI/CD &amp; GitOps - Pipeline and deployment strategies</li> <li>Operations Runbooks - Day-to-day operational procedures</li> <li>Security Baseline - Security configurations and best practices</li> </ul>"},{"location":"#next-steps","title":"Next Steps","text":"<p>With Phases 1 &amp; 2 complete, the upcoming phases include:</p> <ul> <li>Phase 3: CI/CD Pipeline with GitHub Actions</li> <li>Phase 4: Azure AKS Provisioning and Production Setup</li> <li>Phase 5: \u2705 Full Observability Stack (Elastic Stack Logging) - COMPLETE</li> <li>Phase 6: Advanced Secrets Management</li> <li>Phase 7: Velero Backup Configuration</li> <li>Phase 8: Security Policy Enforcement</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<p>This is a living document that evolves with best practices and new tools. Contributions and feedback are welcome!</p> <p>Last Updated: Phase 2 Complete - Full Observability Stack with Monitoring and Logging</p>"},{"location":"local-dev/","title":"Local Development Workflow","text":"<p>This page will document the day-to-day development workflow patterns once the local environment is set up.</p>"},{"location":"local-dev/#coming-soon","title":"Coming Soon","text":"<ul> <li>Development patterns with Tilt</li> <li>GitOps workflow with ArgoCD</li> <li>Testing strategies</li> <li>Debugging techniques</li> <li>Hot reload and live development</li> </ul> <p>For initial environment setup, see Phase 1 - Local Development Environment Setup.</p>"},{"location":"local-setup/phase1-environment-setup/","title":"Local Development Environment Setup","text":"<p>This guide documents the setup of a local Kubernetes development environment on macOS using Colima, K3s, and essential cloud-native tools.</p>"},{"location":"local-setup/phase1-environment-setup/#phase-1-local-kubernetes-with-gitops","title":"Phase 1: Local Kubernetes with GitOps","text":""},{"location":"local-setup/phase1-environment-setup/#prerequisites","title":"Prerequisites","text":""},{"location":"local-setup/phase1-environment-setup/#step-1-homebrew-package-manager","title":"Step 1: Homebrew Package Manager \u0005","text":"<p>Homebrew is required for installing all the tools in this guide.</p> <p>Check Installation: <pre><code>brew --version\n</code></pre></p> <p>Expected Output: <pre><code>Homebrew 4.x.x\n</code></pre></p> <p>Status: \u0005 Installed (Version 4.6.3)</p> <p>If Homebrew is not installed, run: <pre><code>/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n</code></pre></p>"},{"location":"local-setup/phase1-environment-setup/#step-2-install-colima","title":"Step 2: Install Colima","text":"<p>Colima provides a lightweight container runtime with Kubernetes support via K3s.</p> <p>Installation: <pre><code>brew install colima\n</code></pre></p> <p>Verify Installation: <pre><code>colima version\n</code></pre></p> <p>Expected Output: <pre><code>colima version 0.x.x\ngit commit: &lt;commit-hash&gt;\n</code></pre></p> <p>Status: \u2705 Installed (Version 0.8.4)</p>"},{"location":"local-setup/phase1-environment-setup/#step-3-install-docker-cli","title":"Step 3: Install Docker CLI","text":"<p>Docker CLI is required for Colima to provide container runtime functionality.</p> <p>Installation: <pre><code>brew install docker\n</code></pre></p> <p>Verify Installation: <pre><code>docker --version\n</code></pre></p> <p>Expected Output: <pre><code>Docker version xx.x.x, build xxxxxxx\n</code></pre></p> <p>Status: \u2705 Installed (Version 28.3.3)</p> <p>Note: This installs only the Docker CLI, not Docker Desktop. Colima will provide the Docker daemon.</p>"},{"location":"local-setup/phase1-environment-setup/#step-4-install-kubectl","title":"Step 4: Install kubectl","text":"<p>kubectl is the command-line tool for interacting with Kubernetes clusters.</p> <p>Installation: <pre><code>brew install kubectl\n</code></pre></p> <p>Verify Installation: <pre><code>kubectl version --client\n</code></pre></p> <p>Expected Output: <pre><code>Client Version: v1.xx.x\nKustomize Version: vx.x.x\n</code></pre></p> <p>Status: \u2705 Installed (Version 1.33.3)</p>"},{"location":"local-setup/phase1-environment-setup/#step-5-install-tilt","title":"Step 5: Install Tilt","text":"<p>Tilt enables fast local Kubernetes development with automatic rebuilds and live updates.</p> <p>Installation: <pre><code>brew install tilt\n</code></pre></p> <p>Verify Installation: <pre><code>tilt version\n</code></pre></p> <p>Expected Output: <pre><code>v0.x.x, built yyyy-mm-dd\n</code></pre></p> <p>Status: \u2705 Installed (Version 0.35.0)</p>"},{"location":"local-setup/phase1-environment-setup/#step-6-install-argocd-cli","title":"Step 6: Install ArgoCD CLI","text":"<p>ArgoCD CLI for managing GitOps deployments from the command line.</p> <p>Installation: <pre><code>brew install argocd\n</code></pre></p> <p>Verify Installation: <pre><code>argocd version --client\n</code></pre></p> <p>Expected Output: <pre><code>argocd: vx.x.x+xxxxxxx\n  BuildDate: yyyy-mm-dd\n  GitCommit: xxxxxxx\n  Platform: darwin/arm64\n</code></pre></p> <p>Status: \u2705 Installed (Version 3.0.12)</p>"},{"location":"local-setup/phase1-environment-setup/#step-7-install-azure-cli","title":"Step 7: Install Azure CLI","text":"<p>Azure CLI for managing Azure resources and AKS clusters (needed for later phases).</p> <p>Installation: <pre><code>brew install azure-cli\n</code></pre></p> <p>Verify Installation: <pre><code>az version\n</code></pre></p> <p>Expected Output: <pre><code>azure-cli                         2.xx.x\ncore                              2.xx.x\ntelemetry                          x.x.x\n...\n</code></pre></p> <p>Status: \u2705 Installed (Version 2.76.0)</p>"},{"location":"local-setup/phase1-environment-setup/#starting-the-local-kubernetes-cluster","title":"Starting the Local Kubernetes Cluster","text":""},{"location":"local-setup/phase1-environment-setup/#step-8-start-colima-with-kubernetes","title":"Step 8: Start Colima with Kubernetes","text":"<p>Start Colima with K3s Kubernetes and Docker runtime.</p> <p>Start Colima: <pre><code>colima start --kubernetes --cpu 6 --memory 12 --disk 60\n</code></pre></p> <p>This will: - Create a Colima VM with 6 CPUs, 12GB RAM, and 60GB disk - Install Docker daemon inside the VM - Install K3s Kubernetes - Configure kubectl context</p> <p>Note: First run takes several minutes to download images and set up the environment.</p> <p>Verify Kubernetes: <pre><code>kubectl get nodes\n</code></pre></p> <p>Expected Output: <pre><code>NAME     STATUS   ROLES                  AGE   VERSION\ncolima   Ready    control-plane,master   Xm    vX.XX.X+k3s1\n</code></pre></p> <p>Status: \u2705 Running (K3s v1.33.3+k3s1)</p> <p>Docker Context: Automatically switched to <code>colima</code></p>"},{"location":"local-setup/phase1-environment-setup/#installing-argocd","title":"Installing ArgoCD","text":""},{"location":"local-setup/phase1-environment-setup/#step-9-install-argocd-on-the-cluster","title":"Step 9: Install ArgoCD on the Cluster","text":"<p>Deploy ArgoCD for GitOps-based application management.</p> <p>Create Namespace: <pre><code>kubectl create namespace argocd\n</code></pre></p> <p>Install ArgoCD: <pre><code>kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml\n</code></pre></p> <p>Verify Installation: <pre><code>kubectl get pods -n argocd\n</code></pre></p> <p>Expected Output: All pods should show <code>1/1</code> READY and <code>Running</code> status: <pre><code>NAME                                                READY   STATUS    RESTARTS   AGE\nargocd-application-controller-0                     1/1     Running   0          Xm\nargocd-applicationset-controller-XXXXXXXXXX-XXXXX   1/1     Running   0          Xm\nargocd-dex-server-XXXXXXXXXX-XXXXX                  1/1     Running   0          Xm\nargocd-notifications-controller-XXXXXXXXXX-XXXXX    1/1     Running   0          Xm\nargocd-redis-XXXXXXXXXX-XXXXX                       1/1     Running   0          Xm\nargocd-repo-server-XXXXXXXXXX-XXXXX                 1/1     Running   0          Xm\nargocd-server-XXXXXXXXXX-XXXXX                       1/1     Running   0          Xm\n</code></pre></p> <p>Status: \u2705 Installed and Running</p>"},{"location":"local-setup/phase1-environment-setup/#step-10-access-argocd-ui","title":"Step 10: Access ArgoCD UI","text":"<p>Set up port forwarding and access the ArgoCD web interface.</p> <p>Retrieve Admin Password: <pre><code>kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath=\"{.data.password}\" | base64 -d\n</code></pre></p> <p>Start Port Forwarding: <pre><code>kubectl port-forward svc/argocd-server -n argocd 8080:443\n</code></pre></p> <p>Access ArgoCD: 1. Open browser and navigate to: https://localhost:8080 2. Accept the certificate warning (expected for local setup) 3. Login with:    - Username: <code>admin</code>    - Password: (from the command above)</p> <p>ArgoCD UI Successfully Running:</p> <p></p> <p>Status: \u2705 Accessible at https://localhost:8080</p>"},{"location":"local-setup/phase1-environment-setup/#phase-1-complete","title":"Phase 1 Complete!","text":""},{"location":"local-setup/phase1-environment-setup/#summary-of-installed-components","title":"Summary of Installed Components","text":"Tool Version Status Purpose Homebrew 4.6.3 \u2705 Package manager for macOS Colima 0.8.4 \u2705 Container runtime &amp; K8s Docker CLI 28.3.3 \u2705 Container management kubectl 1.33.3 \u2705 Kubernetes CLI Tilt 0.35.0 \u2705 Local K8s development ArgoCD CLI 3.0.12 \u2705 GitOps CLI Azure CLI 2.76.0 \u2705 Azure resource management"},{"location":"local-setup/phase1-environment-setup/#running-services","title":"Running Services","text":"<ul> <li>Kubernetes Cluster: K3s v1.33.3 via Colima (6 CPU, 12GB RAM, 60GB disk)</li> <li>ArgoCD: v2.x running in cluster, accessible via port-forward</li> <li>Docker: Available via Colima context</li> </ul>"},{"location":"local-setup/phase1-environment-setup/#next-steps","title":"Next Steps","text":"<p>With Phase 1 complete, you now have: - \u2705 A local Kubernetes cluster running on your Mac - \u2705 ArgoCD installed and accessible for GitOps deployments - \u2705 All necessary CLI tools for development</p> <p>You can now proceed to: - Phase 2: Setting up GitOps repository and deploying observability stacks</p>"},{"location":"local-setup/phase1-environment-setup/#useful-commands","title":"Useful Commands","text":"<p>Check cluster status: <pre><code>kubectl get nodes\nkubectl get pods --all-namespaces\n</code></pre></p> <p>Stop/Start Colima: <pre><code>colima stop\ncolima start\n</code></pre></p> <p>Access ArgoCD (when port-forward is stopped): <pre><code>kubectl port-forward svc/argocd-server -n argocd 8080:443\n</code></pre></p>"},{"location":"local-setup/phase2-gitops-setup/","title":"Phase 2: GitOps Repository and ArgoCD Configuration","text":"<p>This guide documents the setup of a GitOps repository structure and ArgoCD configuration for managing both local development and production environments.</p>"},{"location":"local-setup/phase2-gitops-setup/#prerequisites","title":"Prerequisites","text":"<ul> <li>\u2705 Phase 1 Complete (Local K8s cluster with ArgoCD installed)</li> <li>\u2705 GitHub account with repository creation permissions</li> <li>\u2705 Git configured locally with SSH access to GitHub</li> </ul>"},{"location":"local-setup/phase2-gitops-setup/#gitops-repository-setup","title":"GitOps Repository Setup","text":""},{"location":"local-setup/phase2-gitops-setup/#step-1-create-gitops-repository","title":"Step 1: Create GitOps Repository","text":"<p>Create a dedicated repository for Kubernetes manifests and configurations.</p> <p>Repository Created: <pre><code>Repository: github.com/sojohnnysaid/k8s\nType: Private\n</code></pre></p> <p>Clone and Initialize: <pre><code>git clone git@github.com:sojohnnysaid/k8s.git\ncd k8s\n</code></pre></p> <p>Status: \u2705 Complete</p>"},{"location":"local-setup/phase2-gitops-setup/#step-2-create-directory-structure","title":"Step 2: Create Directory Structure","text":"<p>Organize the repository for your Kubernetes manifests.</p> <p>Create Directories: <pre><code># Create directory for ArgoCD application definitions and manifests\nmkdir -p argocd-apps/monitoring-manifests\nmkdir -p argocd-apps/elastic-manifests\n\n# Create archive for old test applications (optional)\nmkdir -p archive/test-apps\n</code></pre></p> <p>Repository Structure: <pre><code>.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 argocd-apps/\n\u2502   \u251c\u2500\u2500 monitoring-manifests/    # Prometheus &amp; Grafana manifests\n\u2502   \u251c\u2500\u2500 elastic-manifests/       # Elastic Stack manifests\n\u2502   \u251c\u2500\u2500 monitoring.yaml          # ArgoCD app definition\n\u2502   \u2514\u2500\u2500 elasticsearch-only.yaml  # ArgoCD app definition\n\u2514\u2500\u2500 archive/                     # Archived test applications\n</code></pre></p> <p>Status: \u2705 Complete</p>"},{"location":"local-setup/phase2-gitops-setup/#step-3-create-main-readme","title":"Step 3: Create Main README","text":"<p>Document your repository structure and approach.</p> <p>README.md: <pre><code># K8s GitOps Repository\n\nThis repository contains raw Kubernetes manifests for our infrastructure, deployed via ArgoCD.\n\n## Architecture Principles\n- **No Helm**: All applications use raw Kubernetes manifests for full control\n- **GitOps**: ArgoCD syncs from this repository automatically\n- **Simplicity**: Direct manifests are easier to understand and debug\n\n## Directory Structure\n- `argocd-apps/` - ArgoCD application definitions and manifests\n  - `monitoring-manifests/` - Prometheus and Grafana\n  - `elastic-manifests/` - Elasticsearch, Kibana, Logstash, Filebeat\n- `archive/` - Old test applications (not deployed)\n</code></pre></p> <p>Status: \u2705 Complete</p>"},{"location":"local-setup/phase2-gitops-setup/#infrastructure-components-setup","title":"Infrastructure Components Setup","text":""},{"location":"local-setup/phase2-gitops-setup/#step-4-add-prometheus-grafana-stack","title":"Step 4: Add Prometheus &amp; Grafana Stack","text":"<p>Configure monitoring using raw Kubernetes manifests (moved away from Helm for better control).</p> <p>Directory Structure: <pre><code>argocd-apps/monitoring-manifests/\n\u251c\u2500\u2500 namespace.yaml\n\u251c\u2500\u2500 prometheus.yaml  \n\u251c\u2500\u2500 grafana.yaml\n</code></pre></p> <p>Prometheus Configuration: Raw manifests with: - ServiceAccount and RBAC for cluster monitoring - ConfigMap with scraping configuration - Deployment with resource limits optimized for local development - Service for internal access</p> <p>Grafana Configuration: Raw manifests with: - ConfigMap for Prometheus datasource - Deployment with anonymous admin access for dev - Service exposing port 3000</p> <p>Status: \u2705 Complete</p>"},{"location":"local-setup/phase2-gitops-setup/#step-5-add-elastic-stack-elk-filebeat","title":"Step 5: Add Elastic Stack (ELK + Filebeat)","text":"<p>Configure complete logging solution using raw Kubernetes manifests.</p> <p>Directory Structure: <pre><code>argocd-apps/elastic-manifests/\n\u251c\u2500\u2500 namespace.yaml\n\u251c\u2500\u2500 elasticsearch.yaml\n\u251c\u2500\u2500 kibana.yaml\n\u251c\u2500\u2500 logstash.yaml\n\u2514\u2500\u2500 filebeat.yaml\n</code></pre></p> <p>Elasticsearch Configuration: - Single-node setup with <code>discovery.type: single-node</code> - 2GB memory, ephemeral storage for local dev - Security disabled for simplicity - Service exposing port 9200</p> <p>Kibana Configuration: - Connected to Elasticsearch service - Web UI on port 5601 - Auto-configured for Elasticsearch connection</p> <p>Logstash Configuration: - Beats input on port 5044 - Processing pipeline for Kubernetes metadata - Output to Elasticsearch with daily indices</p> <p>Filebeat Configuration: - DaemonSet collecting logs from all containers - Kubernetes metadata enrichment - Ships to Logstash for processing - RBAC configured for pod/node access</p> <p>Status: \u2705 Complete</p>"},{"location":"local-setup/phase2-gitops-setup/#step-6-repository-configuration-for-ssh-access","title":"Step 6: Repository Configuration for SSH Access","text":"<p>Configure ArgoCD to access the GitOps repository via SSH.</p> <p>SSH Key Setup: <pre><code># ArgoCD SSH keys should be in ~/.ssh/\nls ~/.ssh/argocd*\n# argocd-github (private key)\n# argocd-github.pub (public key added to GitHub deploy keys)\n</code></pre></p> <p>Create Repository Secret: <pre><code>kubectl create secret generic github-k8s-repo \\\n  --namespace=argocd \\\n  --from-literal=type=git \\\n  --from-literal=url=git@github.com:sojohnnysaid/k8s.git \\\n  --from-file=sshPrivateKey=$HOME/.ssh/argocd-github\n\nkubectl label secret github-k8s-repo -n argocd \\\n  argocd.argoproj.io/secret-type=repository\n</code></pre></p> <p>Status: \u2705 Complete</p>"},{"location":"local-setup/phase2-gitops-setup/#step-7-create-application-manifests","title":"Step 7: Create Application Manifests","text":"<p>Create raw Kubernetes manifests for each component.</p> <p>Files to Create: <pre><code>argocd-apps/\n\u251c\u2500\u2500 monitoring-manifests/\n\u2502   \u251c\u2500\u2500 namespace.yaml       # Creates monitoring namespace\n\u2502   \u251c\u2500\u2500 prometheus.yaml      # Prometheus deployment, service, RBAC\n\u2502   \u2514\u2500\u2500 grafana.yaml         # Grafana deployment, service, configmaps\n\u2514\u2500\u2500 elastic-manifests/\n    \u251c\u2500\u2500 namespace.yaml       # Creates elastic-stack namespace\n    \u251c\u2500\u2500 elasticsearch.yaml   # Single-node ES StatefulSet\n    \u251c\u2500\u2500 kibana.yaml          # Kibana deployment and service\n    \u251c\u2500\u2500 logstash.yaml        # Logstash deployment for processing\n    \u2514\u2500\u2500 filebeat.yaml        # DaemonSet for log collection\n</code></pre></p> <p>Key Configuration Choices: - Raw Kubernetes manifests for full control - Minimal resource requirements for local development - Ephemeral storage (no persistent volumes) - Security disabled for simplicity in dev</p> <p>Status: \u2705 Complete</p>"},{"location":"local-setup/phase2-gitops-setup/#argocd-repository-configuration","title":"ArgoCD Repository Configuration","text":""},{"location":"local-setup/phase2-gitops-setup/#step-8-configure-repository-access","title":"Step 8: Configure Repository Access","text":"<p>Configure ArgoCD to access your GitOps repository via SSH.</p> <p>Create SSH Keys for ArgoCD: <pre><code># Generate SSH key pair if not already done\nssh-keygen -t ed25519 -f ~/.ssh/argocd-github -C \"argocd-local\"\n\n# Add public key to GitHub repository as Deploy Key with read-only access\ncat ~/.ssh/argocd-github.pub\n# Copy and add to: GitHub Repo Settings &gt; Deploy keys &gt; Add deploy key\n</code></pre></p> <p>Create Repository Secret: <pre><code># Create secret with SSH private key\nkubectl create secret generic github-k8s-repo \\\n  --namespace=argocd \\\n  --from-literal=type=git \\\n  --from-literal=url=git@github.com:sojohnnysaid/k8s.git \\\n  --from-file=sshPrivateKey=$HOME/.ssh/argocd-github\n\n# Label as repository secret\nkubectl label secret github-k8s-repo -n argocd \\\n  argocd.argoproj.io/secret-type=repository\n</code></pre></p> <p>Verify repository configuration: <pre><code>kubectl get secrets -n argocd -l argocd.argoproj.io/secret-type=repository\n</code></pre></p> <p>Expected Output: <pre><code>NAME              TYPE     DATA   AGE\ngithub-k8s-repo   Opaque   3      XXm\n</code></pre></p> <p>Status: \u2705 Complete</p>"},{"location":"local-setup/phase2-gitops-setup/#deploying-monitoring-stack","title":"Deploying Monitoring Stack","text":""},{"location":"local-setup/phase2-gitops-setup/#step-9-prepare-repository","title":"Step 9: Prepare Repository","text":"<p>Ensure your repository is clean and organized.</p> <p>Clean up any test applications: <pre><code>cd /path/to/your/k8s-repo\n\n# Archive any test applications if they exist\nmkdir -p archive/test-apps\nmv argocd-apps/test* archive/test-apps/ 2&gt;/dev/null || true\n</code></pre></p> <p>Final repository structure: <pre><code>k8s/\n\u251c\u2500\u2500 argocd-apps/\n\u2502   \u251c\u2500\u2500 monitoring-manifests/     # Raw K8s manifests\n\u2502   \u251c\u2500\u2500 elastic-manifests/        # Raw K8s manifests\n\u2502   \u251c\u2500\u2500 monitoring.yaml           # ArgoCD app definition\n\u2502   \u2514\u2500\u2500 elasticsearch-only.yaml   # ArgoCD app definition\n\u251c\u2500\u2500 archive/                      # Not deployed\n\u2514\u2500\u2500 README.md\n</code></pre></p> <p>Status: \u2705 Complete</p>"},{"location":"local-setup/phase2-gitops-setup/#step-10-create-argocd-applications","title":"Step 10: Create ArgoCD Applications","text":"<p>Define applications for both monitoring and logging stacks using Git repository.</p> <p>Monitoring Application (<code>argocd-apps/monitoring.yaml</code>): <pre><code>apiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: monitoring\n  namespace: argocd\nspec:\n  project: default\n  source:\n    repoURL: git@github.com:sojohnnysaid/k8s.git\n    path: argocd-apps/monitoring-manifests\n    targetRevision: main\n  destination:\n    server: https://kubernetes.default.svc\n    namespace: monitoring\n  syncPolicy:\n    automated:\n      prune: true\n      selfHeal: true\n    syncOptions:\n      - CreateNamespace=true\n</code></pre></p> <p>Elastic Stack Application (<code>argocd-apps/elasticsearch-only.yaml</code>): <pre><code>apiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: elasticsearch\n  namespace: argocd\nspec:\n  project: default\n  source:\n    repoURL: git@github.com:sojohnnysaid/k8s.git\n    path: argocd-apps/elastic-manifests\n    targetRevision: main\n  destination:\n    server: https://kubernetes.default.svc\n    namespace: elastic-stack\n  syncPolicy:\n    automated:\n      prune: true\n      selfHeal: true\n    syncOptions:\n      - CreateNamespace=true\n</code></pre></p> <p>Note: Both applications pull raw Kubernetes manifests directly from your Git repository.</p> <p>Status: \u2705 Complete</p>"},{"location":"local-setup/phase2-gitops-setup/#step-11-deploy-applications","title":"Step 11: Deploy Applications","text":"<p>Apply both monitoring and Elastic Stack applications to ArgoCD.</p> <p>Deploy the applications: <pre><code>kubectl apply -f argocd-apps/monitoring.yaml\nkubectl apply -f argocd-apps/elasticsearch-only.yaml\n</code></pre></p> <p>Monitor deployment status: <pre><code># Check application status\nkubectl get applications -n argocd\n\n# Expected output:\n# NAME            SYNC STATUS   HEALTH STATUS\n# monitoring      Synced        Healthy\n# elasticsearch   Synced        Healthy\n</code></pre></p> <p>Verify pods are running: <pre><code># Monitoring stack\nkubectl get pods -n monitoring\n# Expected: prometheus and grafana pods\n\n# Elastic stack\nkubectl get pods -n elastic-stack\n# Expected: elasticsearch, kibana, logstash, and filebeat pods\n</code></pre></p> <p>Status: \u2705 Complete</p>"},{"location":"local-setup/phase2-gitops-setup/#step-12-access-dashboards","title":"Step 12: Access Dashboards","text":"<p>Set up access to both Grafana and Kibana web interfaces.</p> <p>Grafana (Metrics): <pre><code>kubectl port-forward -n monitoring svc/grafana 3000:3000\n</code></pre> - URL: http://localhost:3000 - Username: <code>admin</code> - Password: <code>admin</code> - Pre-configured with Prometheus datasource</p> <p>Kibana (Logs): <pre><code>kubectl port-forward -n elastic-stack svc/kibana 5601:5601\n</code></pre> - URL: http://localhost:5601 - No authentication required (security disabled for dev) - Create index pattern <code>logstash-*</code> to view logs - All container logs are automatically collected</p> <p>Status: \u2705 Complete</p>"},{"location":"local-setup/phase2-gitops-setup/#step-13-verify-gitops-sync","title":"Step 13: Verify GitOps Sync","text":"<p>Confirm ArgoCD is managing the deployment via GitOps.</p> <p>Check in ArgoCD UI: <pre><code># Port-forward ArgoCD\nkubectl port-forward svc/argocd-server -n argocd 8080:443\n\n# Get admin password\nkubectl -n argocd get secret argocd-initial-admin-secret \\\n  -o jsonpath=\"{.data.password}\" | base64 -d &amp;&amp; echo\n</code></pre></p> <p>Access ArgoCD: - URL: https://localhost:8080 - Username: <code>admin</code> - Password: (from command above)</p> <p>Verify application in UI: - Application should show as \"Synced\" and \"Healthy\" - All resources should be green - Auto-sync should be enabled</p> <p>Status: \u2705 Complete</p>"},{"location":"local-setup/phase2-gitops-setup/#step-14-commit-changes-to-git","title":"Step 14: Commit Changes to Git","text":"<p>Save your configuration to the GitOps repository.</p> <p>Commit and push: <pre><code># Add application manifests\ngit add argocd-apps/\n\n# Commit\ngit commit -m \"feat: add observability stacks using raw manifests\n\n- Monitoring: Prometheus and Grafana\n- Logging: Complete Elastic Stack (ELK + Filebeat)\n- Raw Kubernetes manifests only\n- Auto-sync enabled for GitOps\"\n\n# Push to GitHub\ngit push origin main\n</code></pre></p> <p>Verify GitOps: After pushing, ArgoCD automatically syncs and deploys any changes.</p> <p>Status: \u2705 Complete</p>"},{"location":"local-setup/phase2-gitops-setup/#phase-2-complete","title":"Phase 2 Complete!","text":""},{"location":"local-setup/phase2-gitops-setup/#summary-of-achievements","title":"Summary of Achievements","text":"<p>You have successfully:</p> Component Status Details GitOps Repository \u2705 Created at <code>github.com/sojohnnysaid/k8s</code> Repository Structure \u2705 Simple structure with <code>argocd-apps/</code> containing all manifests SSH Access \u2705 Deploy keys configured for ArgoCD Monitoring Stack \u2705 Prometheus &amp; Grafana using raw Kubernetes manifests Elastic Stack \u2705 Complete ELK + Filebeat for log aggregation GitOps Sync \u2705 ArgoCD auto-syncing from Git repository Architecture \u2705 100% raw Kubernetes manifests, no templating"},{"location":"local-setup/phase2-gitops-setup/#running-services","title":"Running Services","text":"<p>Monitoring Stack (Metrics): - Prometheus: Collecting and storing metrics with minimal resources - Grafana: Visualization with Prometheus datasource (port 3000)</p> <p>Elastic Stack (Logs): - Elasticsearch: Log storage and indexing (single-node, ephemeral) - Kibana: Log visualization and search UI (port 5601) - Logstash: Log processing and enrichment pipeline - Filebeat: DaemonSet collecting logs from all containers</p>"},{"location":"local-setup/phase2-gitops-setup/#access-information","title":"Access Information","text":"<p>ArgoCD UI: <pre><code>kubectl port-forward svc/argocd-server -n argocd 8080:443\n# URL: https://localhost:8080\n# Username: admin\n# Password: kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath=\"{.data.password}\" | base64 -d\n</code></pre></p> <p>Grafana UI: <pre><code>kubectl port-forward -n monitoring svc/grafana 3000:3000\n# URL: http://localhost:3000\n# Username: admin\n# Password: admin\n</code></pre></p> <p>Kibana UI: <pre><code>kubectl port-forward -n elastic-stack svc/kibana 5601:5601\n# URL: http://localhost:5601\n# No authentication (security disabled for dev)\n# Create index pattern: logstash-*\n</code></pre></p>"},{"location":"local-setup/phase2-gitops-setup/#key-configurations","title":"Key Configurations","text":"<p>Repository Structure: <pre><code>k8s/\n\u251c\u2500\u2500 argocd-apps/\n\u2502   \u251c\u2500\u2500 monitoring.yaml                    # ArgoCD app for monitoring stack\n\u2502   \u251c\u2500\u2500 elasticsearch-only.yaml            # ArgoCD app for Elastic stack\n\u2502   \u251c\u2500\u2500 monitoring-manifests/              # Raw K8s manifests\n\u2502   \u2502   \u251c\u2500\u2500 namespace.yaml\n\u2502   \u2502   \u251c\u2500\u2500 prometheus.yaml\n\u2502   \u2502   \u2514\u2500\u2500 grafana.yaml\n\u2502   \u2514\u2500\u2500 elastic-manifests/                 # Raw K8s manifests\n\u2502       \u251c\u2500\u2500 namespace.yaml\n\u2502       \u251c\u2500\u2500 elasticsearch.yaml\n\u2502       \u251c\u2500\u2500 kibana.yaml\n\u2502       \u251c\u2500\u2500 logstash.yaml\n\u2502       \u2514\u2500\u2500 filebeat.yaml\n\u2514\u2500\u2500 README.md\n</code></pre></p> <p>Important Settings: - Manifest-based: All deployments use raw Kubernetes manifests - Auto-sync: Enabled for automatic deployment from Git - SSH Authentication: Repository access via SSH deploy keys - Resource Limits: Optimized for local development - Ephemeral Storage: No persistent volumes for simplicity - Security Disabled: Elasticsearch/Kibana security off for dev</p>"},{"location":"local-setup/phase2-gitops-setup/#next-steps","title":"Next Steps","text":"<p>With Phase 2 complete, you have a fully functional local development environment with: - \u2705 Complete monitoring stack (Prometheus &amp; Grafana) - \u2705 Complete logging stack (Elastic Stack with ELK + Filebeat) - \u2705 GitOps workflow with ArgoCD - \u2705 All using raw Kubernetes manifests</p> <p>Future phases could include: - Phase 3: CI/CD pipeline with GitHub Actions - Phase 4: Azure AKS for production deployment - Phase 5: Advanced secrets management - Phase 6: Velero for backup and disaster recovery - Phase 7: Security policies and hardening</p>"},{"location":"local-setup/phase2-gitops-setup/#troubleshooting-commands","title":"Troubleshooting Commands","text":"<p>Check application sync status: <pre><code>kubectl get applications -n argocd\nargocd app get monitoring\n</code></pre></p> <p>View ArgoCD logs: <pre><code>kubectl logs -n argocd deployment/argocd-server\nkubectl logs -n argocd deployment/argocd-repo-server\n</code></pre></p> <p>Check monitoring pods: <pre><code>kubectl get pods -n monitoring\nkubectl describe pod &lt;pod-name&gt; -n monitoring\n</code></pre></p> <p>Test GitOps sync: <pre><code># Make a change in the repository\n# ArgoCD should detect and sync within 3 minutes\nargocd app sync monitoring\n</code></pre></p>"}]}